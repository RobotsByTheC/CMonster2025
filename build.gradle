plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"

    // linting, style, and static analysis tools
    id 'com.diffplug.spotless' version '6.25.0' apply false
    id 'net.ltgt.errorprone' version '3.1.0' apply false
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // Enable VisualVM connection
                    jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    jvmArgs.add("-Djava.rmi.server.hostname=10.20.84.2") // Replace TE.AM with team number
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'

    // Set text encoding to UTF-8 to support characters like "Â°",
    // which are not part of the ASCII character set
    options.encoding = 'UTF-8'
}

// Linting, style, and static analysis tools
if (!project.hasProperty('skipJavaFormat')) {
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = "10.12.5"
        configDirectory = file("${project.rootDir}/styleguide")
        config = resources.text.fromFile(new File(configDirectory.get().getAsFile(), "checkstyle.xml"))
    }

    apply plugin: 'pmd'

    pmd {
        toolVersion = '6.55.0'
        consoleOutput = true
        reportsDir = file("$project.buildDir/reports/pmd")
        ruleSetFiles = files(new File(rootDir, "styleguide/pmd-ruleset.xml"))
        ruleSets = []
    }

    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**', '**/bin/**'
            }
            toggleOffOn()
            googleJavaFormat()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
                exclude '**/build/**', '**/build-*/**', '**/bin/**'
            }
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
        json {
            target fileTree('.') {
                include '**/*.json'
                exclude '**/build/**', '**/build-*/**', '**/bin/**'
                exclude '**/simgui-ds.json', '**/simgui-window.json', '**/simgui.json', '**/networktables.json'
                exclude '.vscode/*.json'
                exclude '.wpilib/*.json'
                exclude 'vendordeps/*.json'
            }
            gson().indentWithSpaces(2)
        }
        format 'xml', {
            target fileTree('.') {
                include '**/*.xml'
                exclude '**/build/**', '**/build-*/**', '**/bin/**', '**/.idea/**', '**/.run/**'
            }
            eclipseWtp('xml')
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        format 'misc', {
            target fileTree('.') {
                include '**/*.md', '**/.gitignore'
                exclude '**/build/**', '**/build-*/**', '**/bin/**'
            }
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
}

task javaFormat {
    dependsOn(tasks.withType(Checkstyle))
    dependsOn(tasks.withType(Pmd))
}
javaFormat.dependsOn 'spotlessApply'
